let t=!1;class a{static async removeBackground(a){await async function(){t||(await import("./transformers.web-CKjaDHWl.js"),t=!0)}();const e=new OffscreenCanvas(a.width,a.height),n=e.getContext("2d");n.putImageData(a,0,0);const r=new ImageData(new Uint8ClampedArray(a.data),a.width,a.height);for(let t=0;t<r.data.length;t+=4){(r.data[t]+r.data[t+1]+r.data[t+2])/3>200&&(r.data[t+3]=0)}return n.putImageData(r,0,0),e.convertToBlob({type:"image/png"})}static async resizeOptimize(t,a){const{width:e=t.width,height:n=t.height,quality:r=.8}=a,s=new OffscreenCanvas(e,n),i=s.getContext("2d"),o=new OffscreenCanvas(t.width,t.height);return o.getContext("2d").putImageData(t,0,0),i.imageSmoothingEnabled=!0,i.imageSmoothingQuality="high",i.drawImage(o,0,0,e,n),s.convertToBlob({type:"image/jpeg",quality:r})}}class e{static async applyFilter(t,a){const e=new Uint8ClampedArray(t.data),n=t.width,r=t.height;switch(a){case"blur":return this.applyBlur(e,n,r);case"sharpen":return this.applySharpen(e,n,r);case"brightness":return this.adjustBrightness(e,n,r,1.2);case"contrast":return this.adjustContrast(e,n,r,1.2);default:return new ImageData(e,n,r)}}static applyBlur(t,a,e){const n=new Uint8ClampedArray(t.length),r=[1,2,1,2,4,2,1,2,1];for(let s=1;s<e-1;s++)for(let e=1;e<a-1;e++){for(let i=0;i<3;i++){let o=0;for(let n=-1;n<=1;n++)for(let c=-1;c<=1;c++){o+=t[4*((s+n)*a+(e+c))+i]*r[3*(n+1)+(c+1)]}n[4*(s*a+e)+i]=o/16}n[4*(s*a+e)+3]=t[4*(s*a+e)+3]}return new ImageData(n,a,e)}static applySharpen(t,a,e){const n=new Uint8ClampedArray(t.length),r=[0,-1,0,-1,5,-1,0,-1,0];for(let s=1;s<e-1;s++)for(let e=1;e<a-1;e++){for(let i=0;i<3;i++){let o=0;for(let n=-1;n<=1;n++)for(let c=-1;c<=1;c++){o+=t[4*((s+n)*a+(e+c))+i]*r[3*(n+1)+(c+1)]}n[4*(s*a+e)+i]=Math.max(0,Math.min(255,o))}n[4*(s*a+e)+3]=t[4*(s*a+e)+3]}return new ImageData(n,a,e)}static adjustBrightness(t,a,e,n){const r=new Uint8ClampedArray(t.length);for(let s=0;s<t.length;s+=4)r[s]=Math.max(0,Math.min(255,t[s]*n)),r[s+1]=Math.max(0,Math.min(255,t[s+1]*n)),r[s+2]=Math.max(0,Math.min(255,t[s+2]*n)),r[s+3]=t[s+3];return new ImageData(r,a,e)}static adjustContrast(t,a,e,n){const r=new Uint8ClampedArray(t.length),s=128*(n-1);for(let i=0;i<t.length;i+=4)r[i]=Math.max(0,Math.min(255,n*t[i]+s)),r[i+1]=Math.max(0,Math.min(255,n*t[i+1]+s)),r[i+2]=Math.max(0,Math.min(255,n*t[i+2]+s)),r[i+3]=t[i+3];return new ImageData(r,a,e)}static async renderShape(t){const a=new OffscreenCanvas(500,500),e=a.getContext("2d");return e.fillStyle="#8B5CF6",e.fillRect(50,50,400,400),e.getImageData(0,0,a.width,a.height)}}class n{static async processChunk(t,a){try{return new Function("return "+a)()(t)}catch(e){throw new Error(`Function execution failed: ${e}`)}}}self.onmessage=async t=>{const r=performance.now(),{id:s,data:i,type:o}=t.data;try{let t;switch(o){case"image-processing":"background-removal"===i.operation&&i.imageData?t=await a.removeBackground(i.imageData):"resize-optimize"===i.operation&&i.imageData&&(t=await a.resizeOptimize(i.imageData,i.options||{}));break;case"canvas-optimization":"render-shape"===i.operation?t=await e.renderShape(i.shape):i.imageData&&i.operation&&(t=await e.applyFilter(i.imageData,i.operation));break;case"ai-inference":i.chunk&&i.fn&&(t=await n.processChunk(i.chunk,i.fn));break;case"file-processing":t={processed:!0};break;default:throw new Error(`Unknown task type: ${o}`)}const c={id:s,result:t,processingTime:performance.now()-r};self.postMessage(c)}catch(c){const t=performance.now()-r,a={id:s,result:null,error:c instanceof Error?c.message:"Unknown error",processingTime:t};self.postMessage(a)}};
